apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'

buildscript {
    Properties constants = new Properties()
    file("$projectDir/../constants.properties").withInputStream { constants.load(it) }
    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        jopt_simple_version = '5.0.2'
        corda_os_release_group = "net.corda"
        corda_os_release_version = "4.0"
        
        corda_platform_version = constants.getProperty("platformVersion")
        
        v1_contract = ":contracts:v1-basic-obligation"
        v2_contract = ":contracts:v2-obligation-can-default"
        
        v1_workflow = ":workflows:v1-initial"
        v2_workflow = ":workflows:v2-new-finality-flow"
        v3_workflow = ":workflows:v3-can-default"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:publish-utils:$corda_gradle_plugins_version"
    }
}

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-dependencies'}
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        maven { url 'https://jitpack.io' }
        if (System.env.CORDA_ENTERPRISE_REPOSITORY_URL != null) {
            maven {
                url = System.getenv('CORDA_ENTERPRISE_REPOSITORY_URL')
                credentials {
                    username = System.getenv('CORDA_ENTERPRISE_REPOSITORY_USERNAME')
                    password = System.getenv('CORDA_ENTERPRISE_REPOSITORY_PASSWORD')
                }
            }
        }
    }

    configurations {
        compile {
            // We want to use SLF4J's version of these bindings: jcl-over-slf4j
            // Remove any transitive dependency on Apache's version.
            exclude group: 'commons-logging', module: 'commons-logging'
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    compileOnly "$corda_release_group:corda-webserver-impl:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-webserver:$corda_release_version"

    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"

    // CorDapp dependencies.
    cordapp "$corda_os_release_group:corda-finance-contracts:$corda_os_release_version"
    cordapp "$corda_release_group:corda-finance-workflows:$corda_release_version"
    cordapp "$corda_release_group:corda-confidential-identities:$corda_release_version"
    
    cordapp project(v1_contract)
    cordapp project(v2_contract)
    
    cordapp project(v1_workflow)
    cordapp project(v2_workflow)
    cordapp project(v3_workflow)
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        cordapp("$corda_os_release_group:corda-finance-contracts:$corda_os_release_version")
        cordapp("$corda_release_group:corda-finance-workflows:$corda_release_version")
        cordapp("$corda_release_group:corda-confidential-identities:$corda_release_version")
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
        projectCordapp {
            deploy = false
        }
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        cordapps.clear()
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        cordapp(project(v1_contract))
        cordapp(project(v1_workflow))
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        cordapp(project(v1_contract))
        cordapp(project(v1_workflow))
    }
    node {
        name "O=PartyC,L=Paris,C=FR"
        p2pPort 10011
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }
        cordapp(project(v1_contract))
        cordapp(project(v2_workflow))
    }
}
