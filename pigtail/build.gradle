buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.0'
        corda_gradle_plugins_version = '4.0.42'
        kotlin_version = '1.2.71'
        junit_version = '4.12'
        slf4j_version = '1.7.25'
        quasar_version = '0.7.10'
        netty_version = '4.1.22.Final' // Same version of Netty as Corda uses.
        corda_platform_version = '4'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

allprojects {
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
        maven { url "https://ci-artifactory.corda.r3cev.com/artifactory/corda-dependencies" }
        maven { url 'https://jitpack.io' }
    }

    configurations {
        compile {
            // We want to use SLF4J's version of these bindings: jcl-over-slf4j
            // Remove any transitive dependency on Apache's version.
            exclude group: 'commons-logging', module: 'commons-logging'
        }

        all {
            resolutionStrategy {
                // Demand that everything uses our given version of Netty.
                eachDependency { details ->
                    if (details.requested.group == 'io.netty' && details.requested.name.startsWith('netty-')) {
                        details.useVersion netty_version
                    }
                }
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion corda_platform_version.toInteger()
    info {
        name "Pigtail"
        vendor "Corda Open Source"
    }
}

repositories {
    // To resolve the pigtailDrivers artifacts.
    mavenCentral()
}

configurations {
    pigtailDrivers {
        transitive = false
    }
}

dependencies {
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // Needed by deployNodes task.
    runtimeOnly "$corda_release_group:corda-node-api:$corda_release_version"
    runtimeOnly "org.slf4j:slf4j-simple:$slf4j_version"

    pigtailDrivers "javax.validation:validation-api:1.1.0.Final"

    // CorDapp dependencies.
    cordapp project(':cordapp')
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10003
        rpcSettings {
            address("localhost:10004")
            adminAddress("localhost:10005")
        }
        cordapp project(':cordapp')
        drivers = configurations.pigtailDrivers.collect { it.path }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}
