buildscript {

        Properties constants = new Properties()
    file("$projectDir/../constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion")
        netty_version = constants.getProperty("nettyVersion")
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

allprojects {
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        // [Option 1: Add CORDA_ENTERPRISE_REPOSITORY_URL, CORDA_ENTERPRISE_REPOSITORY_USERNAME and CORDA_ENTERPRISE_REPOSITORY_PASSWORD environment variables that point to your company's maven repository which contain the enterprise binaries.]
        if (System.env.CORDA_ENTERPRISE_REPOSITORY_URL != null) {
            maven {
                url = System.getenv('CORDA_ENTERPRISE_REPOSITORY_URL')
                credentials {
                    username = System.getenv('CORDA_ENTERPRISE_REPOSITORY_USERNAME')
                    password = System.getenv('CORDA_ENTERPRISE_REPOSITORY_PASSWORD')
                }
            }
        }
        // [Option 2: Add Corda Enterprise binaries in ~/.m2/repository or C:\Documents and Settings\{your-username}\.m2]
        // [Option 3: uncomment the following block and tweak it to point to resolve Corda Enterprise dependencies against a custom path on your local file system.]
        // maven {
        //     url 'file:///Users/nimmaj/dev/r3/enterpriseM2/repository-RELEASE_V_PLACEHOLDER'
        // }
    }

    configurations {
        compile {
            // We want to use SLF4J's version of these bindings: jcl-over-slf4j
            // Remove any transitive dependency on Apache's version.
            exclude group: 'commons-logging', module: 'commons-logging'
        }

        all {
            resolutionStrategy {
                // Demand that everything uses our given version of Netty.
                eachDependency { details ->
                    if (details.requested.group == 'io.netty' && details.requested.name.startsWith('netty-')) {
                        details.useVersion netty_version
                    }
                }
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion corda_platform_version.toInteger()
    info {
        name "Pigtail"
        vendor "Corda Open Source"
    }
}

repositories {
    // To resolve the pigtailDrivers artifacts.
    mavenCentral()
}

configurations {
    pigtailDrivers {
        transitive = false
    }
}

dependencies {
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // Needed by deployNodes task.
    runtimeOnly "$corda_release_group:corda-node-api:$corda_release_version"
    runtimeOnly "org.slf4j:slf4j-simple:$slf4j_version"

    pigtailDrivers "javax.validation:validation-api:1.1.0.Final"

    // CorDapp dependencies.
    cordapp project(':cordapp')
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10003
        rpcSettings {
            address("localhost:10004")
            adminAddress("localhost:10005")
        }
        cordapp project(':cordapp')
        drivers = configurations.pigtailDrivers.collect { it.path }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}
