buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.0'
        corda_gradle_plugins_version = '4.0.41'
        kotlin_version = '1.2.71'
        junit_version = '4.12'
        slf4j_version = '1.7.25'
        quasar_version = '0.7.10'
        corda_platform_version = '4'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases'
        }
        mavenLocal()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

allprojects {
    apply plugin: 'kotlin'

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-dev' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'

cordapp {
    info {
        name "CorDapp Reference Flows Example"
        vendor "Corda Open Source"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion corda_platform_version.toInteger()
    }
}

dependencies {
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    runtimeOnly "org.slf4j:slf4j-simple:$slf4j_version"

    // CorDapp dependencies.
    cordapp project(":reference-example-contracts")
    cordapp project(":reference-example-flows")
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(":reference-example-contracts")
        cordapp project(":reference-example-flows")
        rpcUsers = [['username': "default", 'password': "default", 'permissions': [ 'ALL' ]]]
    }

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10000
        rpcSettings {
            address("localhost:10001")
            adminAddress("localhost:10002")
        }
        cordapps.clear()
    }
    node {
        name "O=SanctionsBody,L=London,C=GB"
        p2pPort 10004
        rpcSettings {
            address("localhost:10005")
            adminAddress("localhost:10006")
        }
    }
    node {
        name "O=IOUPartyA,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10010")
        }
    }
    node {
        name "O=IOUPartyB,L=Paris,C=FR"
        p2pPort 10012
        rpcSettings {
            address("localhost:10013")
            adminAddress("localhost:10014")
        }
    }
    node {
        name "O=DodgyParty,L=Moscow,C=RU"
        p2pPort 10016
        rpcSettings {
            address("localhost:10017")
            adminAddress("localhost:10018")
        }
    }
}
